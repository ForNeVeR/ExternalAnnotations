<?xml version="1.0" encoding="utf-8"?>
<assembly name="System.Runtime">
  <member name="M:System.String.IsNullOrEmpty(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
      <argument>null=&gt;true</argument>
      <argument>true</argument>
    </attribute>
  </member>
  <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
      <argument>null=&gt;true</argument>
      <argument>true</argument>
    </attribute>
  </member>
  <member name="M:System.String.Format(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <argument>format</argument>
    </attribute>
  </member>
  <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentNullException.#ctor(System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
    <parameter name="comparison">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
    <parameter name="comparison">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>a:notnull=&gt;notnull;b:notnull=&gt;notnull;</argument>
    </attribute>
  </member>
  <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>=&gt;true; =&gt;false, value: null</argument>
    </attribute>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
    <parameter name="valueFactory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
    <parameter name="valueFactory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
    <parameter name="valueFactory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
    <parameter name="x">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
    </parameter>
    <parameter name="y">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Array.Empty``1">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="F:System.String.Empty">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Object.GetType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Enum.GetNames(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name ="M:System.Collections.Generic.List`1.BinarySearch(`0)">
    <attribute ctor="M:JetBrains.Annotations.CollectionAccessAttribute.#ctor(JetBrains.Annotations.CollectionAccessType)">
      <argument>1</argument>
    </attribute>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name ="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
    <attribute ctor="M:JetBrains.Annotations.CollectionAccessAttribute.#ctor(JetBrains.Annotations.CollectionAccessType)">
      <argument>1</argument>
    </attribute>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name ="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
    <attribute ctor="M:JetBrains.Annotations.CollectionAccessAttribute.#ctor(JetBrains.Annotations.CollectionAccessType)">
      <argument>1</argument>
    </attribute>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
    <parameter name="match">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
      <argument>3</argument> 
    </attribute>
  </member>
  <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="P:System.Threading.Tasks.Task.Exception">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Threading.Tasks.Task.Factory">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Threading.Tasks.Task.CompletedTask">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.GetAwaiter">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Yield">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationAction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
    <parameter name="continuationFunction">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <parameter name="scheduler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>

  <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>

  <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
    <parameter name="exception">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
    <parameter name="exception">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromCancellation(System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromCancellation``1(System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
    <parameter name="action">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
    <parameter name="action">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="tasks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Reflection.Assembly.GetCallingAssembly">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetEntryAssembly">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetExportedTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetFiles">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetLoadedModules">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetModules">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Assembly.GetTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.CodeBase">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.EscapedCodeBase">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.Evidence">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.FullName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.Location">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Assembly.ManifestModule">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.EventInfo.GetAddMethod">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.EventInfo.GetOtherMethods">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.EventInfo.EventHandlerType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.FieldInfo.FieldType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.MemberInfo.Module">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.MemberInfo.Name">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.MemberInfo.ReflectedType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.MethodBase.GetGenericArguments">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.MethodBase.GetParameters">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="typeArguments">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="P:System.Reflection.MethodInfo.ReturnType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.Module.GetField(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Reflection.Module.GetTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Module.Assembly">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Module.FullyQualifiedName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Module.Name">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.Module.ScopeName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.ParameterInfo.Member">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.ParameterInfo.ParameterType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.ParameterInfo.DefaultValue">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.PropertyInfo.GetAccessors">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Reflection.PropertyInfo.PropertyType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Runtime.Serialization.SerializationInfo.AssemblyName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Name">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.ObjectType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="T:System.Lazy`1">
    <typeparameter name="T"> 
      <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
        <argument>8</argument>
      </attribute>
    </typeparameter>
  </member>
</assembly>
